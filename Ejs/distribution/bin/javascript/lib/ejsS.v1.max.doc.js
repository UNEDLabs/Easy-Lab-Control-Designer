{"TextArea":{"description":"TextArea","class":"TextArea","constructor":"","properties":{"MarkType":{"description":"Type of marker to draw","property":"MarkType","type":"int|String","values":"0=\"ELLIPSE\", 1=\"RECTANGLE\", 2:\"AREA\", 3:\"BAR\"","default":"\"ELLIPSE\""},"MarkSize":{"description":"Size of the marker to draw","property":"MarkSize","type":"int[2] providing the width and height in pixels","default":"[0,0]"},"MarkLineColor":{"description":"Color for the lines of the markers","property":"MarkLineColor","type":"String","see":"http://www.w3schools.com/cssref/css_colornames.asp","default":"\"Black\""},"MarkLineWidth":{"description":"Marker stroke width","property":"MarkLineWidth","type":"double","default":"0.5"},"MarkDrawLines":{"description":"Whether the marker lines are drawn","property":"MarkDrawLines","type":"boolean","default":"true"},"MarkFillColor":{"description":"The fill color for the markers","property":"MarkFillColor","type":"String","see":"http://www.w3schools.com/cssref/css_colornames.asp","default":"\"Blue\""},"MarkDrawFill":{"description":"Whether the marker are filled","property":"MarkDrawFill","type":"boolean","default":"true"},"MarkRelativePosition":{"description":"Position of the marker relative to the point","property":"MarkRelativePosition","type":"int|String","values":"\"CENTER\":0,\"NORTH\":1,\"SOUTH\":2,\"EAST\":3,\"WEST\":4,\"NORTH_EAST\":5,\"NORTH_WEST\":6, \"SOUTH_EAST\":7,\"SOUTH_WEST\":8","default":"\"CENTER"}},"methods":{"setChangeColorOnEdit":{"description":"Whether to change color onkeydown/onblur","method":"setChangeColorOnEdit","param1":"change boolean"},"addText":{"description":"Add the text and scroll to the bottom","method":"addText","param1":"value double"},"clear":{"description":"Clear the text area","method":"clear"},"setRadius":{"description":"Set radius","method":"setRadius","param1":"radius"},"setNumberOfMarks(value)":{"description":"Sets the number of marks","method":"setNumberOfMarks(value)","visibility":"public","param1":"value int"},"getNumberOfMarks":{"description":"Gets the number of marks","method":"getNumberOfMarks","visibility":"public","return":"int"},"setBigMark(value)":{"description":"Sets the interval for big marks","method":"setBigMark(value)","visibility":"public","param1":"value int"},"getBigMark":{"description":"Gets the interval for big marks","method":"getBigMark","visibility":"public","return":"int"},"setMediumMark(value)":{"description":"Sets the interval for medium marks","method":"setMediumMark(value)","visibility":"public","param1":"value int"},"getMediumMark":{"description":"Gets the interval for medium marks","method":"getMediumMark","visibility":"public","return":"value int"},"setDigits(value)":{"description":"Sets the number of digits for the marks","method":"setDigits(value)","visibility":"public","param1":"value int"},"getPrecision":{"description":"Gets the number of digits for the marks","method":"getPrecision","visibility":"public","return":"int"}},"actions":{}},"EJSS_DRAWING2D.ArrowSet":{"description":"ArrowSet is a set of Arrows","class":"EJSS_DRAWING2D.ArrowSet","constructor":"","properties":{"MarkEndOrient":{"description":"Orientation of the marker. Values are \"auto\" or the angle to rotate the marker","property":"MarkEndOrient","type":"int|String","default":"\"auto\""},"MarkStartOrient":{"description":"Orientation of the marker. Values are \"auto\" or the angle to rotate the marker","property":"MarkStartOrient","type":"int|String","default":"\"auto\""},"MarkMiddleOrient":{"description":"Orientation of the marker. Values are \"auto\" or the angle to rotate the marker","property":"MarkMiddleOrient","type":"int|String","default":"\"auto\""}},"methods":{},"actions":{}},"EJSS_DRAWING2D.Trace":{"description":"A Trace is a sophistication of the Trail element. \n The extra features are the possibility to specify markers that will be displayed at \n each point of the trace.","class":"EJSS_DRAWING2D.Trace","parent":"EJSS_DRAWING2D.Trail","constructor":"","properties":{"MarkType":{"description":"Type of marker to draw","property":"MarkType","type":"int|String","values":"0=\"ELLIPSE\", 1=\"RECTANGLE\", 2:\"AREA\", 3:\"BAR\"","default":"\"ELLIPSE\""},"MarkSize":{"description":"Size of the marker to draw","property":"MarkSize","type":"int[2] providing the width and height in pixels","default":"[0,0]"},"MarkLineColor":{"description":"Color for the lines of the markers","property":"MarkLineColor","type":"String","see":"http://www.w3schools.com/cssref/css_colornames.asp","default":"\"Black\""},"MarkLineWidth":{"description":"Marker stroke width","property":"MarkLineWidth","type":"double","default":"0.5"},"MarkDrawLines":{"description":"Whether the marker lines are drawn","property":"MarkDrawLines","type":"boolean","default":"true"},"MarkFillColor":{"description":"The fill color for the markers","property":"MarkFillColor","type":"String","see":"http://www.w3schools.com/cssref/css_colornames.asp","default":"\"Blue\""},"MarkDrawFill":{"description":"Whether the marker are filled","property":"MarkDrawFill","type":"boolean","default":"true"}},"methods":{"getMarkStyle()":{"description":"Return the style of the mark","method":"getMarkStyle()","visibility":"public"},"setMarkSize(size)":{"description":"Set the size of the mark","method":"setMarkSize(size)","param1":"size int[2]|double[2] array with the size in pixels","visibility":"public"},"getMarkSize()":{"description":"Get the sizes of the mark","method":"getMarkSize()","return":"double[]","visibility":"public"},"setMarkType(type)":{"description":"Set the type of the mark","method":"setMarkType(type)","param1":"type int|String One of: \"CENTER\":0,\"NORTH\":1,\"SOUTH\":2,\"EAST\":3,\"WEST\":4,\"NORTH_EAST\":5,\"NORTH_WEST\":6,                 \"SOUTH_EAST\":7,\"SOUTH_WEST\":8","visibility":"public"},"getMarkType()":{"description":"Get the type of the mark","method":"getMarkType()","return":"int","visibility":"public"}},"actions":{}},"EJSS_DRAWING2D.DrawingPanel":{"description":"A DrawingPanel is a 2D drawing panel with no decoration.","class":"EJSS_DRAWING2D.DrawingPanel","see":"EJSS_DRAWING2D.PlottingPanel","constructor":"","properties":{"AutoScaleX":{"description":"Whether the panel should autoscale in the X dimension","property":"AutoScaleX","type":"boolean","default":"\"false\""},"AutoScaleY":{"description":"Whether the panel should autoscale in the Y dimension","property":"AutoScaleY","type":"boolean","default":"\"false\""},"MinimumX":{"description":"The minimum value for the X coordinates of elements. \n If specified, the minimum is respected even if AutoscaleX is true and there are no elements close to the minimum.","property":"MinimumX","type":"int or double","default":"\"-1\""},"MaximumX":{"description":"The maximum value for the X coordinates of elements. \n If specified, the maximum is respected even if AutoscaleX is true and there are no elements close to the maximum.","property":"MaximumX","type":"int or double","default":"\"+1\""},"MinimumY":{"description":"The minimum value for the Y coordinates of elements. \n If specified, the minimum is respected even if AutoscaleY is true and there are no elements close to the minimum.","property":"MinimumY","type":"int or double","default":"\"-1\""},"MaximumXY":{"description":"The maximum value for the Y coordinates of elements. \n If specified, the maximum is respected even if AutoscaleY is true and there are no elements close to the maximum.","property":"MaximumXY","type":"int or double","default":"\"+1\""},"ScaleXType":{"description":"The type of scale for the X axis","property":"ScaleXType","type":"int or String. One of: <ul>   <li>EJSS_DRAWING2D.DrawingPanel.SCALE_NUM (\"SCALE_NUM\" for short)</li>\n   <li>EJSS_DRAWING2D.DrawingPanel.SCALE_LOG (\"SCALE_LOG\" for short)</li>\n </ul>","default":"\"SCALE_NUM\""},"ScaleYType":{"description":"The type of scale for the Y axis","property":"ScaleYType","type":"int or String. One of: <ul>   <li>EJSS_DRAWING2D.DrawingPanel.SCALE_NUM (\"SCALE_NUM\" for short)</li>\n   <li>EJSS_DRAWING2D.DrawingPanel.SCALE_LOG (\"SCALE_LOG\" for short)</li>\n </ul>","default":"\"SCALE_NUM\""},"MarginX":{"description":"When autoscaling the X axis, the percentage of the X range that should be left (on both sides) around the elements","property":"MarginX","type":"int or double (in the range [0,100])","default":"\"0\""},"MarginY":{"description":"When autoscaling the Y axis, the percentage of the Y range that should be left (on both sides) around the elements","property":"MarginY","type":"int or double (in the range [0,100])","default":"\"0\""},"ClassName":{"description":"A classname for the element that can be used in CSS files","property":"ClassName","type":"String","default":"\"undefined\""},"Width":{"description":"The width of the HTML5 element.\n See <a href=\"http://www.w3schools.com/cssref/pr_dim_width.asp\">this link</a> for possible values.","property":"Width","type":"int or String","default":"\"auto\""},"Height":{"description":"The height of the HTML5 element.\n See <a href=\"http://www.w3schools.com/cssref/pr_dim_width.asp\">this link</a> for possible values.","property":"Height","type":"int or String","default":"\"auto\""},"SquareAspect":{"description":"Whether the panel should modify its scales to keep a 1:1 aspect ratio.","property":"SquareAspect","type":"boolean","default":"\"false\""},"GraphicsMode":{"description":"The type of graphics implementation of the panel. \n Changing the graphics mode may influence what elements are actually displayed and the interaction response of the panel.\n But it may also influence the rendering speed.","property":"GraphicsMode","type":"int or String. One of: <ul>   <li>EJSS_DRAWING2D.DrawingPanel.GRAPHICS2D_SVG (\"SVG\" for short): SVG based drawing, full interaction, may be slower</li> \n   <li>EJSS_DRAWING2D.DrawingPanel.GRAPHICS2D_CANVAS (\"CANVAS\" for short): Canvas-based drawing, reduced interaction, usually faster</li>\n </ul>","default":"\"SCALE_NUM\""},"Enabled":{"description":"Whether the panel should respond to user interaction.\n This is set to \"false\" by default, since 'listening' to interaction slows down the rendering.","property":"Enabled","type":"boolean","default":"\"false\""},"StopMoveEvents":{"description":"Whether to enable the move event listener.\n This is set to \"false\" by default and is ignored when Enabled is set to \"false\".","property":"StopMoveEvents","type":"boolean","default":"\"false\""},"StopEventPropagation":{"description":"Whether to propagate events and gestures to the containing HTML element.\n This may be useful, for instance, to prevent ePub readers from reacting to what should be just an interaction with the panel.","property":"StopEventPropagation","type":"boolean","default":"\"true\""},"Gutters":{"description":"The dimensions of a strip around the main panel drawing area","property":"Gutters","type":"int[4] representing [left,top,right,bottom], the size of the strip (in pixels) in that part of the panel","default":"\"[0,0,0,0] for DrawingPanels, [50,50,50,50] for PlottingPanels\""},"GuttersLineColor":{"description":"The stroke color for the outer border of the panel (exterior border of the gutter).\n See <a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">this link</a> for possible values.","property":"GuttersLineColor","type":"string Any valid CSS color name. \"none\" for no color","see":"http://www.w3schools.com/cssref/css_colornames.asp","default":"\"Black\""},"GuttersLineWidth":{"description":"The stroke width for the outer border of the panel (exterior border of the gutter).","property":"GuttersLineWidth","type":"int width in pixels","default":"\"1\""},"GuttersDrawLines":{"description":"Whether to draw the outer border of the panel (exterior border of the gutter).","property":"GuttersDrawLines","type":"boolean","default":"\"true\""},"GuttersColor":{"description":"The fill color for the gutter.\n See <a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">this link</a> for possible values.","property":"GuttersColor","type":"string Any valid CSS color name. \"none\" for no color","see":"http://www.w3schools.com/cssref/css_colornames.asp","default":"\"rgb(239,239,255) for DrawingPanels, rgb(211,216,255) for PlottingPanels\""},"GuttersFill":{"description":"Whether to fill the gutter.","property":"GuttersFill","type":"boolean","default":"\"true\""},"GuttersRendering":{"description":"SVG shape rendering for the gutters","property":"GuttersRendering","type":"string","values":"\"auto\",\"optimizeSpeed\",\"crispEdges\",\"geometricPrecision\"","default":"\"auto\""},"Background":{"description":"The fill color for the main drawing area of the panel\n See <a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">this link</a> for possible values.","property":"Background","type":"string Any valid CSS color name. \"none\" for no color","see":"http://www.w3schools.com/cssref/css_colornames.asp","default":"\"rgb(239,239,255) for DrawingPanels, White for PlottingPanels\""},"Foreground":{"description":"The stroke color for the border of the main drawing area of the panel (inner border of the gutters)\n See <a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">this link</a> for possible values.","property":"Foreground","type":"string Any valid CSS color name. \"none\" for no color","see":"http://www.w3schools.com/cssref/css_colornames.asp","default":"\"Black\""},"LineColor":{"description":"The stroke color for the border of the main drawing area of the panel (inner border of the gutters).\n Same as \"Foreground\".\n See <a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">this link</a> for possible values.","property":"LineColor","type":"string Any valid CSS color name. \"none\" for no color","see":"http://www.w3schools.com/cssref/css_colornames.asp","default":"\"Black\""},"LineWidth":{"description":"The stroke width for the border of the main drawing area of the panel (inner border of the gutters).","property":"LineWidth","type":"int width in pixels","default":"\"1\""},"DrawLines":{"description":"Whether to draw the inner border of the panel (inside border of the gutter).","property":"DrawLines","type":"boolean","default":"\"true\""},"FillColor":{"description":"The fill color for the main drawing area of the panel.\n Same as \"Background\"\n See <a href=\"http://www.w3schools.com/cssref/css_colornames.asp\">this link</a> for possible values.","property":"FillColor","type":"string Any valid CSS color name. \"none\" for no color","see":"http://www.w3schools.com/cssref/css_colornames.asp","default":"\"rgb(239,239,255) for DrawingPanels, White for PlottingPanels\""},"DrawFill":{"description":"Whether to fill the main drawing area of the panel.","property":"DrawFill","type":"boolean","default":"\"true\""},"Visibility":{"description":"Whether the element is visible","property":"Visibility","type":"boolean","default":"true"},"Display":{"description":"The CSS display property of the element\n See <a href=\"http://www.w3schools.com/cssref/pr_class_display.asp\">this link</a> for possible values.","property":"Display","type":"string","default":"\"inline\""},"CSS":{"description":"An object with one or more CSS properties.\n Example { \"background-color\" : \"red\", \"float\" : \"right\" }","property":"CSS","type":"Object","default":"\"inline\""},"CursorTypeForMove":{"description":"The type of cursor when an element is moved.\n See <a href=\"http://www.w3schools.com/cssref/pr_class_cursor.asp\">this link</a> for possible values.","property":"CursorTypeForMove","type":"String","default":"\"move\""}},"methods":{"getName":{"description":"Get name for drawing panel","method":"getName","return":"string"},"getGraphics":{"description":"Returns the graphics implementation","method":"getGraphics","return":"Graphics"},"importGraphics":{"description":"Returns the svg image in Base64 format","method":"importGraphics","param1":"callback","return":"string"},"getStyle":{"description":"Return the drawing style of the inner rectangle for panel","method":"getStyle","return":"Style"},"getGraphicsMode":{"description":"Get the graphics mode","method":"getGraphicsMode","return":"One of the possible graphics implementation mode: EJSS_DRAWING2D.DrawingPanel.GRAPHICS2D_SVG or EJSS_DRAWING2D.DrawingPanel.GRAPHICS2D_CANVAS"},"getGraphicsModeName":{"description":"Get the graphics mode","method":"getGraphicsModeName","return":"The implementation mode as a string: either \"SVG\" or \"CANVAS\""},"setGraphicsMode":{"description":"Set graphics","method":"setGraphicsMode","param1":"mode One of the possible graphics implementation mode:    EJSS_DRAWING2D.DrawingPanel.GRAPHICS2D_SVG or EJSS_DRAWING2D.DrawingPanel.GRAPHICS2D_CANVAS. Or simply \"CANVAS\" or \"SVG\""},"getAutoScale":{"description":"Get auto-scale","method":"getAutoScale","return":"boolean"},"setAutoScale":{"description":"Set auto-scale","method":"setAutoScale","param1":"auto"},"setAutoScaleX":{"description":"Set auto-scale in X","method":"setAutoScaleX","param1":"auto"},"getAutoScaleX":{"description":"Get auto-scale in X","method":"getAutoScaleX","return":"boolean"},"setAutoScaleY":{"description":"Set auto-scale in Y","method":"setAutoScaleY","param1":"auto"},"getAutoScaleY":{"description":"Get auto-scale in Y","method":"getAutoScaleY","return":"boolean"},"setInvertedScaleY":{"description":"Set inverted scale in Y","method":"setInvertedScaleY","param1":"inverted"},"getInvertedScaleY":{"description":"Get inverted scale in Y","method":"getInvertedScaleY","return":"boolean"},"setTypeScaleX":{"description":"Set type of scale in X","method":"setTypeScaleX","param1":"type"},"getTypeScaleX":{"description":"Get type of scale in X","method":"getTypeScaleX","return":"int"},"setTypeScaleY":{"description":"Set type of scale in Y","method":"setTypeScaleY","param1":"type"},"getTypeScaleY":{"description":"Get type of scale in Y","method":"getTypeScaleY","return":"int"},"setWorldXMin":{"description":"Sets the preferred minimum X coordinate for the panel","method":"setWorldXMin","param1":"xmin"},"getWorldXMin":{"description":"Returns the preferred minimum X coordinate for the panel","method":"getWorldXMin","return":"double"},"setWorldXMax":{"description":"Sets the preferred maximum X coordinate for the panel","method":"setWorldXMax","param1":"xmax"},"getWorldXMax":{"description":"Returns the preferred maximum X coordinate for the panel","method":"getWorldXMax","return":"double"},"setWorldYMin":{"description":"Sets the preferred minimum Y coordinate for the panel","method":"setWorldYMin","param1":"ymin"},"getWorldYMin":{"description":"Returns the preferred minimum Y coordinate for the panel","method":"getWorldYMin","return":"double"},"setWorldYMax":{"description":"Sets the preferred maximum Y coordinate for the panel","method":"setWorldYMax","param1":"ymax"},"getWorldYMax":{"description":"Returns the preferred maximum Y coordinate for the panel","method":"getWorldYMax","return":"double"},"setWorldCoordinates":{"description":"Sets the preferred user coordinates for the panel","method":"setWorldCoordinates","param1":"bounds"},"getWorldCoordinates":{"description":"Gets the preferred user coordinates for the panel","method":"getWorldCoordinates","return":"bounds"},"getMeasuredCoordinates":{"description":"Gets the measured coordinates for the panel","method":"getMeasuredCoordinates","return":"bounds"},"getRealWorldCoordinates":{"description":"Gets the user coordinates for the panel","method":"getRealWorldCoordinates","return":"bounds"},"getRealWorldXMin":{"description":"Returns the minimum X coordinate for the panel","method":"getRealWorldXMin","return":"double"},"getRealWorldXMax":{"description":"Returns the maximum X coordinate for the panel","method":"getRealWorldXMax","return":"double"},"getRealWorldYMin":{"description":"Returns the minimum Y coordinate for the panel","method":"getRealWorldYMin","return":"double"},"getRealWorldYMax":{"description":"Returns the maximum Y coordinate for the panel","method":"getRealWorldYMax","return":"double"},"setSquareAspect":{"description":"Whether the panel should keep a 1:1 aspect ratio between X and Y coordinates","method":"setSquareAspect","param1":"boolean"},"setMarginX":{"description":"Set margin X","method":"setMarginX","param1":"margin"},"getMarginX":{"description":"Get margin X","method":"getMarginX","return":"margin"},"setMarginY":{"description":"Set margin Y","method":"setMarginY","param1":"margin"},"getMarginY":{"description":"Get margin Y","method":"getMarginY","return":"margin"},"setEnabledDragging":{"description":"Allow to drag panel","method":"setEnabledDragging","parem":"motion ENABLED_NONE: 0, ENABLED_ANY: 1, ENABLED_X: 2, ENABLED_Y: 3, ENABLED_NO_MOVE: 4"},"getEnabledDragging":{"description":"Type of motion allowed to drag panel","method":"getEnabledDragging","return":"motion"},"setEnabledZooming":{"description":"Allow to scale panel","method":"setEnabledZooming","param1":"allowed"},"getEnabledZooming":{"description":"Whether panal scaling is allowed","method":"getEnabledZooming","return":"boolean"},"setZoomRate":{"description":"Set zoom rate","method":"setZoomRate","param1":"rate"},"getZoomRate":{"description":"Get zoom rate","method":"getZoomRate","return":"rate"},"setZoomLimits":{"description":"Set zoom limits","method":"setZoomLimits","param1":"limits [min,max]"},"getZoomLimits":{"description":"Get zoom limits","method":"getZoomLimits","return":"limits [min,max]"},"setShowCoordinates":{"description":"Show coordinates in panel","method":"setShowCoordinates","param1":"boolean"},"getShowCoordinates":{"description":"Whether coordinates in panel are showed","method":"getShowCoordinates","return":"boolean"},"setShowAreaRectangle":{"description":"Show area rectangle in panel","method":"setShowAreaRectangle","param1":"boolean"},"getShowAreaRectangle":{"description":"Show area rectangle in panel","method":"getShowAreaRectangle","param1":"boolean"},"addDecoration":{"description":"Adds a decoration to the panel. Decorations are drawn before any other elements.","method":"addDecoration","param1":"drawable decoration element","param2":"position integer","param3":"istop top decoration"},"removeDecoration":{"description":"Removes a decoration","method":"removeDecoration","param1":"drawable decoration element"},"addElement":{"description":"Add a element to the panel. Elements are asked to draw themselves\n whenever the panel needs to render. For this purpose, they will receive a\n calls to draw().\n Elements are reported of changes in the world coordinates of the panel, in case\n they need to recalculate themselves.","method":"addElement","param1":"element Element","param2":"position int"},"removeElement":{"description":"Remove a element to the panel.","method":"removeElement","param1":"element Element"},"getElements":{"description":"Return the array of a elements.","method":"getElements","return":"Elements"},"indexOfElement":{"description":"Return the position of a element.","method":"indexOfElement","param1":"element Element","return":"integer"},"setGutters":{"description":"Sets the gutters dimensions","method":"setGutters","param1":"rect the number of pixels for the drawing area"},"getGutters":{"description":"Return the bounding gutters","method":"getGutters","return":"Gutters"},"getGuttersStyle":{"description":"Return the drawing style of the bounding gutters","method":"getGuttersStyle","return":"Style"},"toPixelAxisY":{"description":"Converts a Y pixel value so that 0 is at the bottom","method":"toPixelAxisY","param1":"y double"},"toPixelAxisX":{"description":"Converts a X pixel value so that 0 is at the left","method":"toPixelAxisX","param1":"x double"},"toPixelPosition":{"description":"To be used only after a call to render()!\n Projects a point from world coordinates to pixel coordinates.","method":"toPixelPosition","param1":"point double[] The original coordinates","param2":"scale double[] The type of scale (LOG or NUM)","return":"double[] An array with the result"},"toPixelMod":{"description":"To be used only after a call to render()!\n Projects a module from world coordinates to pixel coordinates","method":"toPixelMod","param1":"point double[] The original module","return":"double[] The same array once transformed"},"toPanelPosition":{"description":"To be used only after a call to render()!\n Projects a point from pixel coordinates to world coordinates","method":"toPanelPosition","param1":"point double[] The original coordinates","param2":"scale double[] The type of scale (LOG or NUM)","return":"double[] The same array once transformed"},"toPanelMod":{"description":"To be used only after a call to render()!\n Projects a module from pixel coordinates to world coordinates","method":"toPanelMod","param1":"point double[] The original module","return":"double[] The same array once transformed"},"toPixelLogScale":{"description":"Projects a value in world coordinates from a decimal scale \n (defined by origin, min, max and pixratio) to a log scale in pixel coordinates","method":"toPixelLogScale","param1":"value double The original value","param2":"origin double The origin in panel (pixels)","param3":"min double The min value in world coordinates","param4":"max double The max value in world coordinates","param5":"pixratio double The pixels per unit for panel","return":"double The value transformed"},"toPanelLogScale":{"description":"Projects a value in pixel coordinates from a decimal scale \n (defined by origin, min, max and pixratio) to a log scale in world coordinates","method":"toPanelLogScale","param1":"value double The original value","param2":"origin double The origin in panel (pixels)","param3":"min double The min value in world coordinates","param4":"max double The max value in world coordinates","param5":"pixratio double The pixels per unit for panel","return":"double The value transformed"},"getPixelPositionWorldOrigin":{"description":"Get pixel position of the origin","method":"getPixelPositionWorldOrigin","return":"array pixel position"},"getInnerRect":{"description":"Return drawing box (excluding gutters)","method":"getInnerRect","return":"box"},"scale":{"description":"Force scale again","method":"scale"},"touch":{"description":"Refresh all elements","method":"touch"},"recomputeScales":{"description":"Recomputes the scales of the panel.","method":"recomputeScales"},"reportDecorations":{"description":"Report event to decoration elements","method":"reportDecorations","param1":"event"},"checkMeasure":{"description":"Recalculate world dimensions using measure elements","method":"checkMeasure","return":"boolean whether dimesions update"},"reset":{"description":"Reset the scene","method":"reset"},"disable":{"description":"Disable rendering","method":"disable"},"enable":{"description":"Enable rendering","method":"enable"},"render":{"description":"Render the scene","method":"render"},"getPanelInteraction":{"description":"Return Panel Interaction","method":"getPanelInteraction","param1":"panel interaction"},"getController":{"description":"Returns the controller object","method":"getController","return":"Controller"},"setController":{"description":"Set the controller","method":"setController","param1":"Controller"},"serialize":{"description":"Get JSON object with private variables","method":"serialize","visibility":"private"},"unserialize":{"description":"Set JSON object with private variables","method":"unserialize","parem":"json JSON object","visibility":"private"}},"actions":{}},"EJSS_DRAWING2D.Trail":{"description":"A Trail is a two-dimensional drawable that displays a collection of points in the plane. \n The points are added to the trail either through the <tt>InputX</tt> and <tt>InputY</tt>\n properties, or using the element’s <tt>addPoint</tt> or <tt>moveToPoint</tt> functions. \n The points are displayed using lines which connect the points, each with the previous one, \n thus forming a polygonal line (which looks like a trail). The trail can be disconnected \n at some points if the <tt>Connected</tt> property is set temporarily to false, or if \n the <tt>moveToPoint</tt> function is used.<br/> \n The number of points in a trail can be limited through the <tt>Maximum</tt> property. \n Adding points past the limit causes the trail to remove the first points in it.<br/>\n<br/>\n Trails can be broken into several segments using the <tt>newSegment</tt> function. \n Each segment behaves like a sub-trail, but segments can have different drawing \n styles (line width and color). Also, the user can delete the points in the last \n segment without affecting the previous segments.","class":"EJSS_DRAWING2D.Trail","parent":"EJSS_DRAWING2D.Element","constructor":"","properties":{"Active":{"description":"Whether the trail should accept input points.","property":"Active","type":"boolean","default":"true"},"NoRepeat":{"description":"Whether the trail ignores repeated input points","property":"NoRepeat","type":"boolean","default":"false"},"ClearAtInput":{"description":"Whether the trail clears all points when receiving new input. (Useful if input is an array.)","property":"ClearAtInput","type":"boolean","default":"false"},"Skip":{"description":"Whether the trail should display only one oout of many inpout points. \n If Skip is positive, it indicates how many points the trail will take to display one.","property":"Skip","type":"int","default":"0"},"Maximum":{"description":"The maximum number of points the trail accepts. If more input is received, the trail\n will discard the corresponding first points.","property":"Maximum","type":"int","default":"0 indicating no limit"},"Connected":{"description":"Whether the next input point should be connected to the previous one.","property":"Connected","type":"boolean","default":"true"},"Input":{"description":"The next input point for the trail.","property":"Input","type":"int[2]|double[2] An array with a pair of [x,y] coordinates,  or int[n][2]|double[n][2] a double array with n pairs of [x,y] coordinates.","default":"\"none\""},"InputX":{"description":"The X coordinate for the next input point for the trail.","property":"InputX","type":"int|double The X coordinate for the input point  or int[n]|double[n] a double array with the X coordinates for n input points.","default":"\"none\""},"InputY":{"description":"The Y coordinate for the next input point for the trail.","property":"InputY","type":"int|double The Y coordinate for the input point  or int[n]|double[n] a double array with the Y coordinates for n input points.","default":"\"none\""},"RelativePosition":{"property":"RelativePosition","default":"\"SOUTH_WEST\""}},"methods":{"setActive(active)":{"description":"Sets the active state of the trail. An inactive trail ignores all input.","method":"setActive(active)","param1":"active boolean","visibility":"public"},"getActive()":{"description":"Whether the trail is in active mode.","method":"getActive()","return":"boolean"},"setNoRepeat(noRepeat)":{"description":"Sets the no repeat state of the trail.\n When set, a trail will ignore (x,y) points which equal the last added point.","method":"setNoRepeat(noRepeat)","param1":"noRepeat boolean","visibility":"public"},"getNoRepeat()":{"description":"Whether the trail is in no repeat mode.","method":"getNoRepeat()","return":"boolean"},"setClearAtInput(clear)":{"description":"Sets the trail to clear existing points when receiving \n a new point or array of points.","method":"setClearAtInput(clear)","param1":"clear boolean","visibility":"public"},"getClearAtInput()":{"description":"Whether the trail is in clear at input mode.","method":"getClearAtInput()","return":"boolean","visibility":"public"},"setSkip(skip)":{"description":"Sets the skip parameter. When the skip parameter is larger than zero,\n the trail only considers one of every 'skip' points. That is, if skip is 3, \n the trail will consider only every third point sent to it. \n The default is zero, meaning all points must be considered.","method":"setSkip(skip)","param1":"skip int","visibility":"public"},"getSkip()":{"description":"Returns the skip parameter of the trail.","method":"getSkip()","return":"int","visibility":"public"},"setMaximumPoints(maximum)":{"description":"Sets the maximum number of points for the trail.\n Once the maximum is reached, adding a new point will cause\n remotion of the first one. This is useful to keep trails\n down to a reasonable size, since very long trails can slow\n down the rendering (in certain implementations).\n If the value is 0 (the default) the trail grows forever\n without discarding old points.","method":"setMaximumPoints(maximum)","param1":"maximum int","visibility":"public"},"getMaximumPoints()":{"description":"Returns the maximum number of points allowed for the trail","method":"getMaximumPoints()","return":"int","visibility":"public"},"setConnected(connected)":{"description":"Whether to connect next input point with the previous one","method":"setConnected(connected)","param1":"connected boolean","visibility":"public"},"getConnected()":{"description":"Gets the connection state.","method":"getConnected()","return":"boolean","visibility":"public"},"addPoint(x,y,style)":{"description":"Adds a new point to the trail.","method":"addPoint(x,y,style)","param1":"x double The X coordinate of the point  \t\tor point double[] The double[2] array with the coordinates of the point.","param2":"y double The Y coordinate of the point.","param3":"style int an optional connection style: 0 = EJSS_DRAWING2D.Trail.NO_CONNECTION, 1 = EJSS_DRAWING2D.Trail.LINE_CONNECTION","visibility":"public"},"addPoints(x,y)":{"description":"Adds an array of points to the trail.","method":"addPoints(x,y)","param1":"x double The double[] array with the X coordinates of the points. \tor  point double[][] The double[nPoints][2] array with the coordinates of the points.","param2":"y double The double[] array with the Y coordinates of the points.","visibility":"public"},"moveToPoint(x,y)":{"description":"Moves to the new point without drawing.\n (Equivalent to setting the connection type\n to NO_CONNECTION and adding one single point, then setting the \n type back to its previous value.)","method":"moveToPoint(x,y)","param1":"x double The X coordinate of the point. \tor point double[] The double[2] array with the coordinates of the point.","param2":"y double The Y coordinate of the point.","visibility":"public"},"reset()":{"description":"Same as clear","method":"reset()","visibility":"public"},"clear()":{"description":"Clears all points from all segments of the trail.","method":"clear()","visibility":"public"},"clearLastSegment()":{"description":"Clears all points from the last segment of the trail.","method":"clearLastSegment()","visibility":"public"},"initialize()":{"description":"Clears all points from the last segment of the trail, \n respecting previous segments.","method":"initialize()","visibility":"public"},"newSegment()":{"description":"Creates a new segment of the trail.","method":"newSegment()","visibility":"public"}},"actions":{}},"EJSS_DRAWING2D.Histogram":{"description":"A Histogram displays a diagram of frequencies of data","class":"EJSS_DRAWING2D.Histogram","parent":"EJSS_DRAWING2D.Element","constructor":"","properties":{"PixelPosition":{"description":"The input value to append","property":"PixelPosition","type":"double or double[]","default":"false"},"Active":{"description":"Whether the histogram actually accepts input values","property":"Active","type":"boolean","default":"true"},"Occurrences":{"description":"The number of the occurrences of the input","property":"Occurrences","type":"int or double","default":"1"},"ClearAtInput":{"description":"Whether to clear old data whenever new data gets in","property":"ClearAtInput","type":"boolean","default":"false"},"Discrete":{"description":"Whether the bins are discrete or continuous. A discrete bin looks like a thin vertical line, \n a continuous one looks like a bar with the width of the bin","property":"Discrete","type":"boolean","default":"false"},"Normalized":{"description":"Whether the data are normalized to one","property":"Normalized","type":"boolean","default":"false"},"BinWidth":{"description":"The width of the bins. This is the maximum distance that makes two inputs contribute \n to the same bin height. As an example, is the with is 0.5, the inputs 1.1 and 1.4 \n will add their occurrences to the same bin","property":"BinWidth","type":"int or double","default":"1"},"FixBin":{"description":"Fix bin in the input","property":"FixBin","type":"double","default":"0"}},"methods":{},"actions":{}},"EJSS_DRAWING2D.Arrow":{"description":"Arrow is a class to display vectors","class":"EJSS_DRAWING2D.Arrow","parent":"EJSS_DRAWING2D.Element","constructor":"","properties":{"MarkEndOrient":{"description":"Orientation of the marker. Values are \"auto\" or the angle to rotate the marker","property":"MarkEndOrient","type":"int|String","default":"\"auto\""},"MarkStartOrient":{"description":"Orientation of the marker. Values are \"auto\" or the angle to rotate the marker","property":"MarkStartOrient","type":"int|String","default":"\"auto\""},"MarkMiddleOrient":{"description":"Orientation of the marker. Values are \"auto\" or the angle to rotate the marker","property":"MarkMiddleOrient","type":"int|String","default":"\"auto\""}},"methods":{},"actions":{}},"EJSS_DRAWING2D.Axis":{"description":"An Axis is the 2D drawable used by PlottingPanels as decoration","class":"EJSS_DRAWING2D.Axis","parent":"EJSS_DRAWING2D.Segment","constructor":"","properties":{},"methods":{"setAutoTicks":{"method":"setAutoTicks","param1":"auto"},"getAutoTicks":{"method":"getAutoTicks","return":""}},"actions":{}},"EJSS_DRAWING2D.Element":{"description":"Basic Element 2D","class":"EJSS_DRAWING2D.Element","properties":{"Parent":{"description":"Parent of the element","property":"Parent","type":"Panel|Group"},"X":{"description":"Position in X","property":"X","type":"double","default":"0"},"Y":{"description":"Position in Y","property":"Y","type":"double","default":"0"},"Position":{"description":"Coordinates X and Y","property":"Position","type":"double[2]","default":"[0,0]"},"PixelPosition":{"description":"Whether the position is in pixels","property":"PixelPosition","type":"boolean","default":"false"},"Diameter":{"description":"Diameter, i.e. the value of the width and the height","property":"Diameter","type":"double"},"Radius":{"description":"Radius, i.e. the half of the diameter","property":"Radius","type":"double"},"SizeX":{"description":"Size along the X axis","property":"SizeX","type":"double","default":"1"},"SizeY":{"description":"Size along the Y axis","property":"SizeY","type":"double","default":"1"},"Size":{"description":"Size along the X and Y axes","property":"Size","type":"double[2]","default":"[1,1]"},"PixelSize":{"description":"Whether the size is in pixels","property":"PixelSize","type":"boolean","default":"false"},"Bounds":{"description":"Position of the bounding box of the element","property":"Bounds","type":"Object{left,rigth,top,bottom}"},"RelativePosition":{"description":"Position of the coordinates X and Y relative to the element","property":"RelativePosition","type":"string|int","values":"\"CENTER\":0,\"NORTH\":1,\"SOUTH\":2,\"EAST\":3,\"WEST\":4,\"NORTH_EAST\":5,\"NORTH_WEST\":6, \"SOUTH_EAST\":7,\"SOUTH_WEST\":8","default":"\"CENTER\""},"Visibility":{"description":"Whether the element is visible","property":"Visibility","type":"boolean","default":"true"},"Measured":{"description":"Measurability of the element","property":"Measured","type":"boolean","default":"true"},"Transformation":{"description":"Internal transformation of the element","property":"Transformation","type":"int|float[6]|string","values":"int:angle in radians to rotate the element with origin its position,  float[9]: transformation matrix - [scaleX, skewY, skewX, scaleY, translateX, translateY]","see":"http://www.w3.org/TR/SVG-Transforms/","default":"0"},"Rotate":{"description":"Rotation of the element","property":"Rotate","type":"int","values":"int:angle in radians to rotate the element with origin its position","see":"http://www.w3.org/TR/SVG-Transforms/","default":"0"},"ScaleX":{"description":"Scale transformation of the element in X","property":"ScaleX","type":"float","values":"float: scale in X","see":"http://www.w3.org/TR/SVG-Transforms/","default":"1"},"ScaleY":{"description":"Scale transformation of the element in Y","property":"ScaleY","type":"float","values":"float: scale in Y","see":"http://www.w3.org/TR/SVG-Transforms/","default":"1"},"SkewX":{"description":"Skew transformation of the element in X","property":"SkewX","type":"float","values":"float: skew angle in X","see":"http://www.w3.org/TR/SVG-Transforms/","default":"1"},"SkewY":{"description":"Skew transformation of the element in Y","property":"SkewY","type":"float","values":"float: skew angle in Y","see":"http://www.w3.org/TR/SVG-Transforms/","default":"1"},"LineColor":{"description":"Stroke color","property":"LineColor","type":"string","see":"http://www.w3schools.com/cssref/css_colornames.asp","default":"\"Black\""},"LineWidth":{"description":"Stroke width","property":"LineWidth","type":"double","default":"0.5"},"DrawLines":{"description":"Whether the stroke is drawed","property":"DrawLines","type":"boolean","default":"true"},"FillColor":{"description":"Fill color","property":"FillColor","type":"string","see":"http://www.w3schools.com/cssref/css_colornames.asp","default":"\"none\""},"DrawFill":{"description":"Whether the fill color is drawed","property":"DrawFill","type":"boolean","default":"true"},"ShapeRendering":{"description":"SVG shape rendering","property":"ShapeRendering","type":"string","values":"\"auto\",\"optimizeSpeed\",\"crispEdges\",\"geometricPrecision\"","default":"\"auto\""},"Attributes":{"description":"Inline SVG attributtes","property":"Attributes","type":"object","values":"{nameAttr1:value1,nameAttr2:value2,..}"},"EnabledPosition":{"description":"Whether the user could change the position","property":"EnabledPosition","type":"boolean","default":"false"},"MovesGroup":{"description":"Whether the group position also changes when the element position changes","property":"MovesGroup","type":"boolean","default":"false"},"EnabledSize":{"description":"Whether the user could change the size","property":"EnabledSize","type":"boolean","default":"false"},"ResizesGroup":{"description":"Whether the group size also changes when the element size changes","property":"ResizesGroup","type":"boolean","default":"false"},"Sensitivity":{"description":"Sensitivity in pixels when the user touchs the element","property":"Sensitivity","type":"int","default":"20"}},"methods":{"getName":{"description":"Gets name for element","method":"getName","visibility":"public","return":"string"},"setParent":{"description":"Sets the property Parent","method":"setParent","param1":"parent Panel or Group","visibility":"public"},"getParent":{"description":"Gets the property Parent","method":"getParent","return":"Panel|Group","visibility":"public"},"isGroup":{"description":"Is the element a group","method":"isGroup","return":"boolean","visibility":"public"},"getStyle":{"description":"Return the style associated to the element","method":"getStyle","return":"Style","visibility":"public"},"setCustomObject":{"description":"Store an object for internal use","method":"setCustomObject","visibility":"protected"},"getCustomObject":{"description":"Retrieve an object for internal use","method":"getCustomObject","return":"Object","visibility":"protected"},"setX(x)":{"description":"Sets the property X","method":"setX(x)","param1":"x double","visibility":"public"},"getX()":{"description":"Gets the property X","method":"getX()","return":"double","visibility":"public"},"setY(y)":{"description":"Sets the property Y","method":"setY(y)","param1":"y double","visibility":"public"},"getY()":{"description":"Gets the property Y","method":"getY()","return":"double","visibility":"public"},"setPosition":{"description":"Sets the property Position","method":"setPosition","param1":"position double[2]","visibility":"public"},"getPosition":{"description":"Gets the property Position","method":"getPosition","return":"double[2]","visibility":"public"},"setPixelPosition":{"description":"Sets the property PixelPosition","method":"setPixelPosition","param1":"pixel boolean","visibility":"public"},"isPixelPosition":{"description":"Returns the property PixelPosition","method":"isPixelPosition","return":"boolean","visibility":"public"},"setSizeX":{"description":"Sets the property SizeX","method":"setSizeX","param1":"sizeX double","visibility":"public"},"getSizeX":{"description":"Gets the property SizeX","method":"getSizeX","return":"double","visibility":"public"},"setSizeY":{"description":"Sets the property SizeY","method":"setSizeY","param1":"sizeY double","visibility":"public"},"getSizeY":{"description":"Gets the property SizeY","method":"getSizeY","return":"double","visibility":"public"},"setSize":{"description":"Sets the property Size","method":"setSize","param1":"position double[2]","visibility":"public"},"getSize":{"description":"Gets the property Size","method":"getSize","return":"double[]","visibility":"public"},"setPixelSize":{"description":"Sets the property PixelSize","method":"setPixelSize","param1":"pixel boolean","visibility":"public"},"isPixelSize":{"description":"Gets the property PixelSize","method":"isPixelSize","return":"boolean","visibility":"public"},"setBounds":{"description":"Sets bounds for an element","method":"setBounds","param1":"Object{left,rigth,top,bottom}|[left,rigth,top,bottom]","visibility":"public"},"getBounds":{"description":"Returns bounds for an element","method":"getBounds","return":"Object{left,rigth,top,bottom}","visibility":"public"},"getAbsoluteBounds":{"description":"Returns bounds for an element (after applying groups)","method":"getAbsoluteBounds","param1":"withTransf whether transformation must be considered, note it will be   false (or undefinded) when transformations are applied by svg (drawing)","return":"Object{left,rigth,top,bottom}","visibility":"public"},"setVisible":{"description":"Sets the property Visibility","method":"setVisible","param1":"visible boolean","visibility":"public"},"isVisible":{"description":"Gets the property Visibility","method":"isVisible","return":"boolean","visibility":"public"},"isGroupVisible":{"description":"Returns the real visibility status of the element, \n which will be false if it belongs to an invisible group","method":"isGroupVisible","return":"boolean","visibility":"public"},"setMeasured":{"description":"Sets the property Measured","method":"setMeasured","param1":"measured boolean","visibility":"public"},"isMeasured":{"description":"Gets the property Measured","method":"isMeasured","return":"boolean","visibility":"public"},"setTransformation":{"description":"Sets the property Transformation","method":"setTransformation","param1":"trans transformation - [scaleX, skewY, skewX, scaleY, translateX, translateY]","visibility":"public"},"getTransformation":{"description":"Gets the property Transformation","method":"getTransformation","return":"Transformation - [scaleX, skewY, skewX, scaleY, translateX, translateY]","visibility":"public"},"setRotate":{"description":"Sets the property Rotate","method":"setRotate","param1":"Rotate angle","visibility":"public"},"getRotate":{"description":"Gets the property Rotate","method":"getRotate","return":"Rotate angle","visibility":"public"},"setScaleX":{"description":"Sets the property ScaleX","method":"setScaleX","param1":"scale rate","visibility":"public"},"getScaleX":{"description":"Gets the property ScaleX","method":"getScaleX","return":"scale rate","visibility":"public"},"setScaleY":{"description":"Sets the property ScaleY","method":"setScaleY","param1":"scale rate","visibility":"public"},"getScaleY":{"description":"Gets the property ScaleY","method":"getScaleY","return":"scale rate","visibility":"public"},"setSkewX":{"description":"Sets the property SkewX","method":"setSkewX","param1":"skew angle","visibility":"public"},"getSkewX":{"description":"Gets the property SkewX","method":"getSkewX","return":"skew angle","visibility":"public"},"setSkewY":{"description":"Sets the property SkewY","method":"setSkewY","param1":"skew angle","visibility":"public"},"getSkewY":{"description":"Gets the property SkewY","method":"getSkewY","return":"skew angle","visibility":"public"},"getInfo":{"description":"Gets information for element","method":"getInfo","visibility":"private","return":"string"},"setPanel":{"description":"Sets the panel for this element","method":"setPanel","param1":"panel DrawingPanel","visibility":"private"},"getPanel":{"description":"Gets the panel for this element","method":"getPanel","return":"DrawingPanel","visibility":"private"},"getGroupPanel":{"description":"Returns the DrawingPanel in which it (or its final ancestor group) is displayed","method":"getGroupPanel","return":"DrawingPanel","visibility":"private"},"setGroup":{"description":"Sets the group of this element","method":"setGroup","param1":"group Group","visibility":"private"},"getGroup":{"description":"Get the group of this element, if any","method":"getGroup","return":"Group","visibility":"private"},"setSet":{"description":"Sets the index of this element in the set","method":"setSet","param1":"set ElementSet","param2":"index int","visibility":"private"},"getSet":{"description":"Gets the set of this element, if any","method":"getSet","return":"ElementSet","visibility":"private"},"getSetIndex":{"description":"Gets the index of this element in a set, if any","method":"getSetIndex","return":"int","visibility":"private"},"isChanged":{"description":"Whether the element has changed","method":"isChanged","return":"boolean","visibility":"private"},"setChanged":{"description":"Tells the element that it has changed\n Typically used by subclasses when they change something.","method":"setChanged","param1":"changed boolean","visibility":"private"},"isGroupChanged":{"description":"Returns whether the element group has changed","method":"isGroupChanged","return":"boolean","visibility":"private"},"setMustProject":{"description":"Tells the element whether it should reproject its points because the panel\n has changed its projection parameters. Or, the other way round, sets it to false\n if someone (typically methods in subclasses) took care of this already","method":"setMustProject","param1":"needsIt boolean","visibility":"private"},"isMustProject":{"description":"Whether the element needs to project. Typically used by the dawing panel \n whenever it changes its scales","method":"isMustProject","return":"boolean","visibility":"private"},"getPixelPosition":{"description":"Returns pixel coordinates","method":"getPixelPosition","param1":"withTransf whether transformation must be considered, note it will be   false (or undefinded) when transformations are applied by svg (drawing)","return":"double[2]","visibility":"private"},"getPixelSizes":{"description":"Returns pixel sizes","method":"getPixelSizes","param1":"withTransf whether transformation must be considered, note it will be   false (or undefinded) when transformations are applied by svg (drawing)","return":"double[2]","visibility":"private"},"getAbsoluteSize":{"description":"Returns the absolute world sizes in the panel (after applying groups)","method":"getAbsoluteSize","return":"double[2]","visibility":"private"},"getAbsolutePosition":{"description":"Returns the absolute position in the panel (after applying groups)","method":"getAbsolutePosition","param1":"withTransf whether transformation must be considered, note it will be   false (or undefinded) when transformations are applied by svg (drawing)","return":"double[2]","visibility":"private"},"setAbsolutePosition":{"description":"Sets the absolute position in the panel (after applying groups)  \n Note: Transformations are not considered and it is not supported when pixel position is used","method":"setAbsolutePosition","return":"double[2]","visibility":"private"},"setAbsoluteX":{"description":"Sets the absolute position X in the panel (after applying groups)  \n Note: Transformations are not considered and it is not supported when pixel position is used","method":"setAbsoluteX","return":"double","visibility":"private"},"setAbsoluteY":{"description":"Sets the absolute position Y in the panel (after applying groups)  \n Note: Transformations are not considered and it is not supported when pixel position is used","method":"setAbsoluteY","return":"double","visibility":"private"},"getPixelSizeOf":{"description":"Returns pixel sizes for the given sizes in the element's world coordinates","method":"getPixelSizeOf","return":"double[2]","visibility":"private"},"getPixelPositionOf":{"description":"Returns pixel coordinates for the given point in the element's world coordinates","method":"getPixelPositionOf","param1":"withTransf whether transformation must be considered, note it will be   false (or undefinded) when transformations are applied by svg (drawing)","return":"double[2]","visibility":"private"},"toGroupSpaceMod":{"description":"Transforms a module (longitude or size) in the element's world coordinates to\n the group's world coordinates","method":"toGroupSpaceMod","param1":"mod double[] The original module in the body frame","return":"double[] The same array once transformed","visibility":"private"},"toGroupSpace":{"description":"Transforms a double[] point in the element's world coordinates to\n the group's world coordinates","method":"toGroupSpace","param1":"point double[] The original coordinates in the body frame","param2":"withTransf bool Considering group transformations","return":"double[] The same array once transformed","visibility":"private"},"toElementSpace":{"description":"Transforms a double[] point in the group's world coordinates to\n the element's world coordinates\n Note: Transformations are not considered!","method":"toElementSpace","param1":"point double[] The original coordinates in the body frame","return":"double[] The same array once translated","visibility":"private"},"getController":{"description":"Returns the controller object","method":"getController","return":"Controller","visibility":"private"},"setController":{"description":"Sets the controller","method":"setController","param1":"Controller","visibility":"private"},"getInteractionTarget":{"description":"Returns array of the interaction targets defined by the element","method":"getInteractionTarget","return":"targets","visibility":"private"},"registerProperties":{"description":"Registers properties in a ControlElement","method":"registerProperties","param1":"controller A ControlElement that becomes the element controller","visibility":"private"},"copyTo":{"description":"Copies itself to another element","method":"copyTo","param1":"element Element","visibility":"private"},"serialize":{"description":"Get JSON object with private variables","method":"serialize","visibility":"private"},"unserialize":{"description":"Set JSON object with private variables","method":"unserialize","parem":"json JSON object","visibility":"private"}},"actions":{"OnDoubleClick":{"description":"Event when double click","action":"OnDoubleClick"},"OnEnter":{"description":"Event when the mouse enters in the element","action":"OnEnter"},"OnExit":{"description":"Event when the mouse exits the element","action":"OnExit"},"OnPress":{"description":"Event when the mouse clicks over the element","action":"OnPress"},"OnDrag":{"description":"Event when the mouse drags the element","action":"OnDrag"},"OnRelease":{"description":"Event when the mouse release the element","action":"OnRelease"}}},"EJSS_DRAWING2D.SimplePanel":{"description":"A SimplePanel is a 2D drawing panel with no decoration.","class":"EJSS_DRAWING2D.SimplePanel","see":"EJSS_DRAWING2D.PlottingPanel","constructor":"","properties":{},"methods":{"setNumberOfMarks(value)":{"description":"Sets the number of marks","method":"setNumberOfMarks(value)","visibility":"public","param1":"value int"},"getNumberOfMarks":{"description":"Gets the number of marks","method":"getNumberOfMarks","visibility":"public","return":"int"},"setBigMark(value)":{"description":"Sets the interval for big marks","method":"setBigMark(value)","visibility":"public","param1":"value int"},"getBigMark":{"description":"Gets the interval for big marks","method":"getBigMark","visibility":"public","return":"int"},"setMediumMark(value)":{"description":"Sets the interval for medium marks","method":"setMediumMark(value)","visibility":"public","param1":"value int"},"getMediumMark":{"description":"Gets the interval for medium marks","method":"getMediumMark","visibility":"public","return":"int"},"setMarkFactor(value)":{"description":"Sets the factor that divide the value in marks","method":"setMarkFactor(value)","visibility":"public","param1":"value int|double"},"getMarkFactor":{"description":"Gets the factor that divide the displayed value in marks","method":"getMarkFactor","visibility":"public","return":"int|double"},"setMaximumMark(value)":{"description":"Sets the maximum value to display in a mark","method":"setMaximumMark(value)","visibility":"public","param1":"value int|double"},"getMaximumMark":{"description":"Gets the maximum value to display in a mark","method":"getMaximumMark","visibility":"public","return":"value int|double"},"setDigits(value)":{"description":"Sets the number of digits for the marks","method":"setDigits(value)","visibility":"public","param1":"value int"},"getPrecision":{"description":"Gets the number of digits for the marks","method":"getPrecision","visibility":"public","return":"int"}},"actions":{}},"EJSS_DRAWING2D.Custom":{"description":"A Custom element is a 2D drawing element that executes a user function for drawing","class":"EJSS_DRAWING2D.Custom","parent":"EJSS_DRAWING2D.Element","constructor":"","properties":{},"methods":{},"actions":{}},"EJSS_DRAWING2D.Shape":{"description":"A Shape is a 2D drawing element that displays a 2D shape (such as a rectangle, ellipse, etc.)","class":"EJSS_DRAWING2D.Shape","parent":"EJSS_DRAWING2D.Element","properties":{"ShapeType":{"description":"Type of shape","property":"ShapeType","type":"int|String","values":"0:\"NONE\", 1:\"ELLIPSE\", 2:\"RECTANGLE\", 3:\"ROUND_RECTANGLE\", 4:\"WHEEL\", 5:\"POINT\"","default":"\"ELLIPSE\""},"CornerRadius":{"description":"Radius for the corners of a round rectangular shape","property":"CornerRadius","type":"int","default":"10"},"Size":{"property":"Size","default":"[0.1,0.1]"},"RelativePosition":{"property":"RelativePosition","default":"\"CENTER\""},"FillColor":{"property":"FillColor","default":"\"Blue\""},"LineColor":{"property":"LineColor","default":"\"Black\""}},"methods":{"setShapeType(shapeType)":{"description":"Sets the value of the property ShapeType","method":"setShapeType(shapeType)","visibility":"public","param1":"shapeType int|String"},"getShapeType":{"description":"Gets the value of the property ShapeType","method":"getShapeType","visibility":"public","return":"int|String"},"setCornerRadius":{"description":"Sets the value of the property CornerRadius","method":"setCornerRadius","param1":"radius int"},"getCornerRadius":{"description":"Gets the value of the property CornerRadius","method":"getCornerRadius","return":"int"},"getClass":{"description":"Returns the class name","method":"getClass","visibility":"private","return":"String"},"registerProperties":{"description":"Extended registerProperties method","method":"registerProperties","param1":"controller","visibility":"private"},"copyTo":{"description":"Extended copyTo method","method":"copyTo","param1":"Element","visibility":"private"}},"actions":{}},"EJSS_DRAWING2D.PlottingPanel":{"description":"A PlottingPanel is a 2D drawing panel with added decoration. The decoration includes axes, gutters and titles.","class":"EJSS_DRAWING2D.PlottingPanel","parent":"EJSS_DRAWING2D.DrawingPanel","constructor":"","properties":{"Title":{"description":"The title at the top center of the panel","property":"Title","type":"String","default":"\"Plot\""}},"methods":{"getAxisX()":{"method":"getAxisX()","return":"the axis element for the X dimension","visibility":"public","see":"EJSS_DRAWING2D.Axis"},"getAxisY()":{"method":"getAxisY()","return":"the axis element for the Y dimension","visibility":"public","see":"EJSS_DRAWING2D.Axis"}},"actions":{}},"EJSS_DRAWING2D.Segment":{"description":"A Segment is a 2D drawing element that displays a single line","class":"EJSS_DRAWING2D.Segment","parent":"EJSS_DRAWING2D.Element","constructor":"","properties":{},"methods":{},"actions":{}},"EJSS_DRAWING2D.Text":{"description":"A Text is a 2D drawing element that displays a text","class":"EJSS_DRAWING2D.Text","parent":"EJSS_DRAWING2D.Element","properties":{"Text":{"description":"Text","property":"Text","type":"String","default":"\"\""},"Font":{"description":"Font description in one declaration","property":"Font","type":"String - https://www.w3schools.com/cssref/pr_font_font.asp","default":"\"20px Arial\""},"FontFamily":{"description":"Font family","property":"FontFamily","type":"String","default":"\"Arial\""},"FontSize":{"description":"Font size","property":"FontSize","type":"String","default":"\"20\""},"OutlineColor":{"description":"Outline color","property":"OutlineColor","type":"String","default":"\"none\""},"FillColor":{"description":"Fill color","property":"FillColor","type":"String","default":"\"none\""},"FontStyle":{"description":"Font style","property":"FontStyle","type":"String","default":"\"normal\""}},"methods":{"setText":{"description":"Sets text","method":"setText","visibility":"public","param1":"string"},"getText":{"description":"Gets text","method":"getText","visibility":"public","return":"string"}},"actions":{}},"EJSS_DRAWING3D.ArrowSet":{"description":"ArrowSet is a set of Arrows","class":"EJSS_DRAWING3D.ArrowSet","constructor":"","properties":{"HeadHeight":{"description":"Ratio arrow_length/head_length","property":"HeadHeight","type":"double","default":"\"8\""},"HeadWidth":{"description":"Ratio arrow_length/head_width","property":"HeadWidth","type":"double","default":"\"20\""}},"methods":{},"actions":{}},"EJSS_DRAWING3D.DrawingPanel":{"description":"A DrawingPanel is a 3D drawing panel.","class":"EJSS_DRAWING3D.DrawingPanel","constructor":"","properties":{"MinimumX":{"description":"The minimum value for the X coordinates of elements.","property":"MinimumX","type":"int or double","default":"\"-1\""},"MaximumX":{"description":"The maximum value for the X coordinates of elements.","property":"MaximumX","type":"int or double","default":"\"+1\""},"MinimumY":{"description":"The minimum value for the Y coordinates of elements.","property":"MinimumY","type":"int or double","default":"\"-1\""},"MaximumY":{"description":"The maximum value for the Y coordinates of elements.","property":"MaximumY","type":"int or double","default":"\"+1\""},"MinimumZ":{"description":"The minimum value for the Z coordinates of elements.","property":"MinimumZ","type":"int or double","default":"\"-1\""},"MaximumZ":{"description":"The maximum value for the Z coordinates of elements.","property":"MaximumZ","type":"int or double","default":"\"+1\""},"SizeX":{"description":"Size for the X axis.","property":"SizeX","type":"int or double","default":"1"},"SizeY":{"description":"Size for the Y axis.","property":"SizeY","type":"int or double","default":"1"},"SizeZ":{"description":"Size for the Z axis.","property":"SizeZ","type":"int or double","default":"1"},"CameraAzimuth":{"description":"Camera rotation in Z axis.","property":"CameraAzimuth","type":"int or double (degrees)","default":"0"},"CameraAltitude":{"description":"Camera rotation in Y axis.","property":"CameraAltitude","type":"int or double (degrees)","default":"0"},"CameraTilt":{"description":"Camera rotation in X axis.","property":"CameraTilt","type":"int or double (degrees)","default":"0"},"CameraX":{"description":"Camera position in X axis.","property":"CameraX","type":"int or double","default":"4"},"CameraY":{"description":"Camera position in Y axis.","property":"CameraY","type":"int or double","default":"0"},"CameraZ":{"description":"Camera position in Z axis.","property":"CameraZ","type":"int or double","default":"0"},"CameraFocusX":{"description":"Camera focus in X axis.","property":"CameraFocusX","type":"int or double","default":"0"},"CameraFocusY":{"description":"Camera focus in Y axis.","property":"CameraFocusY","type":"int or double","default":"0"},"CameraFocusZ":{"description":"Camera focus in Z axis.","property":"CameraFocusZ","type":"int or double","default":"0"},"CameraUpVectorX":{"description":"Camera up vector in X axis.","property":"CameraUpVectorX","type":"int or double","default":"0"},"CameraUpVectorY":{"description":"Camera up vector in Y axis.","property":"CameraUpVectorY","type":"int or double","default":"0"},"CameraUpVectorZ":{"description":"Camera up vector in Z axis.","property":"CameraUpVectorZ","type":"int or double","default":"0"},"CameraZoomRate":{"description":"Camera zoom rate.","property":"CameraZoomRate","type":"int or double","default":"1.10"},"CameraNear":{"description":"Near plane in 3D projection.","property":"CameraNear","type":"int","default":"1"},"CameraFar":{"description":"Far plane in 3D projection.","property":"CameraFar","type":"int","default":"10000"},"Projection":{"description":"Type of projection.","property":"Projection","type":"int or string","values":"\"PLANAR_XY\": 0; \"PLANAR_XZ\": 1; \"PLANAR_YZ\": 2; \"PERSPECTIVE_OFF\": 3; \"PERSPECTIVE_ON\": 4;","default":"\"PERSPECTIVE_ON\""},"Perspective":{"description":"Field of view when perspective on. A parameter that gives more or less perspective to the projection.","property":"Perspective","type":"int (degrees)","default":"\"45\""},"Lights":{"description":"Lights in scene.","property":"Lights","type":"array of array","default":"[[1,2,3]]"}},"methods":{"getName":{"description":"Get name for drawing panel","method":"getName","return":"string"},"getGraphics":{"description":"Returns the graphics implementation","method":"getGraphics","return":"Graphics"},"supportsWebGL":{"description":"Whether webgl is supported","method":"supportsWebGL","return":"boolean"},"getStyle":{"description":"Return the drawing style of the inner rectangle for panel","method":"getStyle","return":"Style"},"setGraphics":{"description":"Set graphics (only Webgl supported)","method":"setGraphics","param1":"type"},"setWorldXMin":{"description":"Sets the preferred minimum X coordinate for the panel","method":"setWorldXMin","param1":"xmin"},"getWorldXMin":{"description":"Returns the preferred minimum X coordinate for the panel","method":"getWorldXMin","return":"double"},"setWorldXMax":{"description":"Sets the preferred maximum X coordinate for the panel","method":"setWorldXMax","param1":"xmax"},"getWorldXMax":{"description":"Returns the preferred maximum X coordinate for the panel","method":"getWorldXMax","return":"double"},"setWorldYMin":{"description":"Sets the preferred minimum Y coordinate for the panel","method":"setWorldYMin","param1":"ymin"},"getWorldYMin":{"description":"Returns the preferred minimum Y coordinate for the panel","method":"getWorldYMin","return":"double"},"setWorldYMax":{"description":"Sets the preferred maximum Y coordinate for the panel","method":"setWorldYMax","param1":"ymax"},"getWorldYMax":{"description":"Returns the preferred maximum Y coordinate for the panel","method":"getWorldYMax","return":"double"},"setWorldZMin":{"description":"Sets the preferred minimum Y coordinate for the panel","method":"setWorldZMin","param1":"zmin"},"getWorldZMin":{"description":"Returns the preferred minimum Z coordinate for the panel","method":"getWorldZMin","return":"double"},"setWorldZMax":{"description":"Sets the preferred maximum Z coordinate for the panel","method":"setWorldZMax","param1":"zmax"},"getWorldZMax":{"description":"Returns the preferred maximum Z coordinate for the panel","method":"getWorldZMax","return":"double"},"setWorldCoordinates":{"description":"Sets the preferred user coordinates for the panel","method":"setWorldCoordinates","param1":"bounds"},"getWorldCoordinates":{"description":"Gets the preferred user coordinates for the panel","method":"getWorldCoordinates","return":"bounds"},"getCamLocX":{"description":"Gets X coordinate for camera","method":"getCamLocX","return":"x"},"getCamLocY":{"description":"Gets Y coordinate for camera","method":"getCamLocY","return":"y"},"getCamLocZ":{"description":"Gets Z coordinate for camera","method":"getCamLocZ","return":"z"},"getCamLoc":{"description":"Gets coordinates for camera","method":"getCamLoc","return":"vector"},"setCamLocX":{"description":"Sets X coordinate for camera","method":"setCamLocX","param1":"x"},"setCamLocY":{"description":"Sets Y coordinate for camera","method":"setCamLocY","param1":"y"},"setCamLocZ":{"description":"Sets Z coordinate for camera","method":"setCamLocZ","param1":"z"},"setCamLoc":{"description":"Sets coordinates for camera","method":"setCamLoc","param1":"vector [x,y,z]"},"setCamTilt":{"description":"Sets tilt for camera","method":"setCamTilt","param1":"tilt (degrees)"},"getCamTilt":{"description":"Gets tilt for camera","method":"getCamTilt","return":"tilt"},"setCamAzimuth":{"description":"Sets azimuth for camera","method":"setCamAzimuth","param1":"azimuth (degrees)"},"getCamAzimuth":{"description":"Gets azimuth for camera","method":"getCamAzimuth","return":"azimuth"},"setCamAltitude":{"description":"Sets altitude for camera","method":"setCamAltitude","param1":"altitude (degrees)"},"getCamAltitude":{"description":"Gets altitude for camera","method":"getCamAltitude","return":"altitude"},"getCamFocusX":{"description":"Gets X focus for camera","method":"getCamFocusX","return":"x"},"getCamFocusY":{"description":"Gets Y focus for camera","method":"getCamFocusY","return":"y"},"getCamFocusZ":{"description":"Gets Z focus for camera","method":"getCamFocusZ","return":"z"},"getCamFocus":{"description":"Gets focus for camera","method":"getCamFocus","return":"vector"},"setCamFocusX":{"description":"Sets X focus for camera","method":"setCamFocusX","param1":"x"},"setCamFocusY":{"description":"Sets Y focus for camera","method":"setCamFocusY","param1":"y"},"setCamFocusZ":{"description":"Sets Z focus for camera","method":"setCamFocusZ","param1":"z"},"setCamFocus":{"description":"Sets focus for camera","method":"setCamFocus","param1":"vector [x,y,z]"},"getCamUpVectorX":{"description":"Gets X Up Vector for camera","method":"getCamUpVectorX","return":"x"},"getCamUpVectorY":{"description":"Gets Y Up Vector for camera","method":"getCamUpVectorY"},"getCamUpVectorZ":{"description":"Gets Z Up Vector for camera","method":"getCamUpVectorZ","return":"z"},"getCamUpVector":{"description":"Gets Up Vector for camera","method":"getCamUpVector","return":"vector [x,y,z]"},"setCamUpVectorX":{"description":"Sets X Up Vector for camera","method":"setCamUpVectorX","param1":"x"},"setCamUpVectorY":{"description":"Sets Y Up Vector for camera","method":"setCamUpVectorY","param1":"y"},"setCamUpVectorZ":{"description":"Sets Z Up Vector for camera","method":"setCamUpVectorZ","param1":"z"},"setCamUpVector":{"description":"Sets Up Vector for camera","method":"setCamUpVector","param1":"vector [x,y,z]"},"getAutoCamera":{"description":"Gets auto camera","method":"getAutoCamera","return":"boolean"},"getZoomRate":{"description":"Gets zoom rate","method":"getZoomRate","return":"double"},"setZoomRate":{"description":"Sets zoom rate","method":"setZoomRate","param1":"double"},"setLights":{"description":"Set lights","method":"setLights","param1":"array of array"},"getLights":{"description":"Gets lights","method":"getLights","return":"array of array"},"setSizeX":{"description":"Set the size along the X axis of the elements","method":"setSizeX","param1":"sizeX double"},"getSizeX":{"description":"Get the size along the X coordinate of the elements","method":"getSizeX","return":"double"},"setSizeY":{"description":"Set the size along the Y axis of the elements","method":"setSizeY","param1":"sizeY double"},"getSizeY":{"description":"Get the size along the Y coordinate of the elements","method":"getSizeY","return":"double"},"setSizeZ":{"description":"Set the size along the Z axis of the elements","method":"setSizeZ","param1":"sizeZ double"},"getSizeZ":{"description":"Get the size along the Z coordinate of the elements","method":"getSizeZ","return":"double"},"setSize":{"description":"Set the size of the elements","method":"setSize","param1":"position double[] an array of dimension 3 or an object with {x,y,z} properties"},"getSize":{"description":"Get the sizes of the elements","method":"getSize","return":"double[]"},"addDecoration":{"description":"Adds a decoration to the panel. Decorations are drawn before any other elements.","method":"addDecoration","param1":"drawable decoration element","param2":"position integer"},"removeDecoration":{"description":"Removes a decoration","method":"removeDecoration","param1":"drawable decoration element"},"setVisibleDecorationBasicAxis":{"description":"Set visible decoration shown basic axis","method":"setVisibleDecorationBasicAxis","param1":"boolean"},"setVisibleDecorationAxis":{"description":"Set visible decoration shown traditional axis","method":"setVisibleDecorationAxis","param1":"boolean"},"setVisibleDecorationBox":{"description":"Set visible decoration shown box","method":"setVisibleDecorationBox","param1":"boolean"},"setDecorationType":{"description":"Set visible a specific type of decoration","method":"setDecorationType","param1":"type \"NONE\", \"AXES\", \"CUBE\", \"CENTERED_AXIS\""},"addElement":{"description":"Add a element to the panel. Elements are asked to draw themselves\n whenever the panel needs to render. For this purpose, they will receive a\n calls to draw().\n Elements are reported of changes in the world coordinates of the panel, in case\n they need to recalculate themselves.","method":"addElement","param1":"element Element","param2":"position int"},"removeElement":{"description":"Remove a element to the panel.","method":"removeElement","param1":"element Element"},"getElements":{"description":"Return the array of a elements.","method":"getElements","return":"Elements"},"indexOfElement":{"description":"Return the position of a element.","method":"indexOfElement","param1":"element Element","return":"integer"},"getProjection":{"description":"Get the type of projection","method":"getProjection","return":"type"},"setProjection":{"description":"Set the type of projection","method":"setProjection","return":"type \"PLANAR_XY\", \"PLANAR_XZ\", \"PLANAR_YZ\", \"PERSPECTIVE_OFF\", \"PERSPECTIVE_ON\""},"getOrthographic":{"description":"Whether the projection is orthographic","method":"getOrthographic","return":"boolean"},"setOrthographic":{"description":"Set orthographic projection","method":"setOrthographic","param1":"boolean"},"getFOV":{"description":"Get field of view in non-orthographic projection","method":"getFOV","param1":"int"},"setFOV":{"description":"Set field of view in non-orthographic projection","method":"setFOV","return":"int"},"getFar":{"description":"Get far plane in non-orthographic projection","method":"getFar","param1":"number"},"setFar":{"description":"Set far plane in non-orthographic projection","method":"setFar","return":"number"},"getNear":{"description":"Get near plane in non-orthographic projection","method":"getNear","param1":"number"},"setNear":{"description":"Set near plane in non-orthographic projection","method":"setNear","return":"number"},"reset":{"description":"Reset the scene","method":"reset"},"render":{"description":"Render the scene","method":"render"},"setEnabled":{"description":"Whether the panel should respond to user interaction","method":"setEnabled","param1":"enabled boolean"},"setDraggable":{"description":"How the panel should respond to user interaction","method":"setDraggable","param1":"draggable \"NONE\", \"ANY\", \"AZIMUTH\", \"ALTITUDE\""},"getPanelInteraction":{"description":"Return panel interaction","method":"getPanelInteraction","return":"panel interaction"},"getController":{"description":"Returns the controller object","method":"getController","return":"Controller"},"setController":{"description":"Set the controller","method":"setController","param1":"Controller"}},"actions":{}},"EJSS_DRAWING3D.Arrow":{"description":"Arrow is a class to display vectors in 3D","class":"EJSS_DRAWING3D.Arrow","constructor":"","properties":{"HeadHeight":{"description":"Ratio arrow_length/head_length","property":"HeadHeight","type":"double","default":"\"8\""},"HeadWidth":{"description":"Ratio arrow_length/head_width","property":"HeadWidth","type":"double","default":"\"20\""}},"methods":{},"actions":{}},"EJSS_DRAWING3D.Sphere":{"description":"Sphere","class":"EJSS_DRAWING3D.Sphere","constructor":"","properties":{"Radius":{"description":"Radius","property":"Radius","type":"number","default":"0.5"}},"methods":{},"actions":{}},"EJSS_DRAWING3D.Disk":{"description":"Disk","class":"EJSS_DRAWING3D.Disk","constructor":"","properties":{},"methods":{},"actions":{}},"EJSS_DRAWING3D.Element":{"description":"Element is the basic class for 3D elements","class":"EJSS_DRAWING3D.Element","constructor":"","properties":{"Parent":{"description":"Parent of the element","property":"Parent","type":"Panel|Group"},"X":{"description":"Position in X","property":"X","type":"double","default":"0"},"Y":{"description":"Position in Y","property":"Y","type":"double","default":"0"},"Z":{"description":"Position in Z","property":"Z","type":"double","default":"0"},"Position":{"description":"Coordinates X, Y, and Z","property":"Position","type":"double[3]","default":"[0,0,0]"},"SizeX":{"description":"Size along the X axis","property":"SizeX","type":"double","default":"1"},"SizeY":{"description":"Size along the Y axis","property":"SizeY","type":"double","default":"1"},"SizeZ":{"description":"Size along the Z axis","property":"SizeZ","type":"double","default":"1"},"Size":{"description":"Size along the X, Y, and Z axes","property":"Size","type":"double[3]","default":"[1,1,1]"},"EnabledPosition":{"description":"Whether the user could change the position","property":"EnabledPosition","type":"boolean","default":"false"},"MovesGroup":{"description":"Whether the group position also changes when the element position changes","property":"MovesGroup","type":"boolean","default":"false"},"EnabledSize":{"description":"Whether the user could change the size","property":"EnabledSize","type":"boolean","default":"false"},"ResizesGroup":{"description":"Whether the group size also changes when the element size changes","property":"ResizesGroup","type":"boolean","default":"false"}},"methods":{"copyTo":{"description":"Copies itself to another element","method":"copyTo","param1":"element Element"},"getName":{"description":"Get name for element","method":"getName","return":"string"},"setTextureUrl":{"description":"Set texture url","method":"setTextureUrl","param1":"url"},"getTextureUrl":{"description":"Get texture url","method":"getTextureUrl","return":"url"},"setVisible":{"description":"Sets the visibility of the element","method":"setVisible","param1":"visible boolean"},"isVisible":{"description":"Whether the element is visible","method":"isVisible","return":"boolean"},"isGroupVisible":{"description":"Returns the real visibility status of the element, which will be false if\n it belongs to an invisible group","method":"isGroupVisible","return":"boolean"},"getStyle":{"description":"Return the style (defined in DrawingPanel.js) of the inner rectangle","method":"getStyle","return":"boolean"},"setMeasured":{"description":"Sets the measurability of the element","method":"setMeasured","param1":"measured boolean"},"isMeasured":{"description":"Whether the element is measured","method":"isMeasured","return":"boolean"},"setColor":{"description":"Set color","method":"setColor","param1":"color"},"setX":{"description":"Set the X coordinate of the element","method":"setX","param1":"x double"},"getX":{"description":"Get the X coordinate of the element","method":"getX","return":"double"},"setY":{"description":"Set the Y coordinate of the element","method":"setY","param1":"y double"},"getY":{"description":"Get the Y coordinate of the element","method":"getY","return":"double"},"setZ":{"description":"Set the Z coordinate of the element","method":"setZ","param1":"z double"},"getZ":{"description":"Get the Z coordinate of the element","method":"getZ","return":"double"},"setPosition":{"description":"Set the coordinates of the element","method":"setPosition","param1":"position double[] an array of dimension 3"},"getPosition":{"description":"Get the coordinates of the element","method":"getPosition","return":"double[3]"},"setSizeX":{"description":"Set the size along the X axis of the element","method":"setSizeX","param1":"sizeX double"},"getSizeX":{"description":"Get the size along the X coordinate of the element","method":"getSizeX","return":"double"},"setSizeY":{"description":"Set the size along the Y axis of the element","method":"setSizeY","param1":"sizeY double"},"getSizeY":{"description":"Get the size along the Y coordinate of the element","method":"getSizeY","return":"double"},"setSizeZ":{"description":"Set the size along the Z axis of the element","method":"setSizeZ","param1":"sizeZ double"},"getSizeZ":{"description":"Get the size along the Z coordinate of the element","method":"getSizeZ","return":"double"},"setSize":{"description":"Set the size of the element","method":"setSize","param1":"position double[] an array of dimension 3 or an object with {x,y,z} properties"},"getSize":{"description":"Get the sizes of the element","method":"getSize","return":"double[]"},"setPanel":{"description":"To be used internally by DrawingPanel only! Sets the panel for this element.","method":"setPanel","param1":"panel DrawingPanel"},"getPanel":{"description":"For internal use only, use getGroupPanel() instead. Gets the panel for this element.","method":"getPanel","return":"DrawingPanel"},"getGroupPanel":{"description":"Returns the DrawingPanel in which it (or its final ancestor group) is displayed.","method":"getGroupPanel","return":"drawing3D.DrawingPanel"},"setGroup":{"description":"To be used internally by Group only! Sets the group of this element.","method":"setGroup","param1":"group Group"},"getGroup":{"description":"Get the group of this element, if any","method":"getGroup","return":"Group"},"setSet":{"description":"To be used internally by ElementSet only! Sets the index of this element in the set","method":"setSet","param1":"set ElementSet","param2":"index int"},"getSetIndex":{"description":"Get the index of this element in a set, if any","method":"getSetIndex","return":"int"},"setParent":{"description":"Set the parent","method":"setParent","param1":"parent Panel or Element"},"getParent":{"description":"Get the parent","method":"getParent","return":"parent Panel or Element"},"setTransformation":{"description":"Sets the internal rotation of the element.","method":"setTransformation","param1":"rot [[angle, x, y, z],...]"},"getTransformation":{"description":"Get the internal rotation of the element.","method":"getTransformation","return":"Transformation"},"getGroupTransformation":{"description":"Get the group transformation of the element.","method":"getGroupTransformation","return":"Transformation"},"isAlwaysUpdated":{"description":"Whether element mesh must be always drawn","method":"isAlwaysUpdated","return":"boolean"},"setAlwaysUpdated":{"description":"Tells whether element mesh must be always drawn","method":"setAlwaysUpdated","param1":"always boolean"},"isChanged":{"description":"Whether the element projection has changed","method":"isChanged","return":"boolean"},"setMeshChanged":{"description":"Tells the element mesh that it has changed.\n Typically used by subclasses when they change something.","method":"setMeshChanged","param1":"changed boolean"},"setProjChanged":{"description":"Tells the element projection that it has changed.\n Typically used by subclasses when they change something.","method":"setProjChanged","param1":"changed boolean"},"isGroupChanged":{"description":"Returns whether the element group has changed.","method":"isGroupChanged","return":"boolean"},"getController":{"description":"Returns the controller object","method":"getController","return":"Controller"},"setController":{"description":"Set the controller","method":"setController","param1":"Controller"},"registerProperties":{"description":"Registers properties in a ControlElement","method":"registerProperties","param1":"controller A ControlElement that becomes the element controller"}},"actions":{}},"EJSS_DRAWING3D.Cylinder":{"description":"Cylinder","class":"EJSS_DRAWING3D.Cylinder","constructor":"","properties":{"BottomRadius":{"description":"Bottom radius","property":"BottomRadius","type":"number","default":"1"},"TopRadius":{"description":"Top radius","property":"TopRadius","type":"number","default":"1"},"MinAngleU":{"description":"Minimum angle in drawing","property":"MinAngleU","type":"number","default":"0"},"MaxAngleU":{"description":"Maximum angle in drawing","property":"MaxAngleU","type":"number","default":"360"}},"methods":{"setOriginAndEnd":{"description":"Changes the position and Size Z and adds an extra transformation\n so that the axis of the element has the prescribed origin and end points","method":"setOriginAndEnd","param1":"origin a double[3] array with the origin of the axis","param2":"end a double[3] array with the end point of the axis"}},"actions":{}},"EJSS_DRAWING3D.ElementSet":{"description":"ElementSet is the basic class for a set of Elements","class":"EJSS_DRAWING3D.ElementSet","constructor":"","properties":{"EnabledPosition":{"description":"Whether the user could change the position","property":"EnabledPosition","type":"boolean","default":"false"},"MovesGroup":{"description":"Whether the group position also changes when the element position changes","property":"MovesGroup","type":"boolean","default":"false"},"EnabledSize":{"description":"Whether the user could change the size","property":"EnabledSize","type":"boolean","default":"false"},"ResizesGroup":{"description":"Whether the group size also changes when the element size changes","property":"ResizesGroup","type":"boolean","default":"false"}},"methods":{"_addFontResizeListener":{"description":"Add a function to be called when the font size changes","method":"_addFontResizeListener","param1":"listener a function to be called with possible the following parameters listener(iBase,iSize,iDelta);\n where:\n  iBase the base font size in pixels \n  iSize the current font size in pixels \n  iDelta the change in pixels from the last size"},"_addResizeListener":{"description":"Add a function to be called when the view size changes","method":"_addResizeListener","param1":"listener a function to be called with possible the following parameters listener(data);\n where:\n  data.width is the new inner width \n  data.height is the new inner height"},"_addOrientationChangeListener":{"description":"Add a function to be called when the view orientation changes","method":"_addOrientationChangeListener","param1":"listener a function to be called with possible the following parameters listener(width,height);\n where:\n  width the new inner width \n  height the new inner height"},"_addOnBlurAction":{"description":"Add a function to be called when the window in which the model runs looses focus","method":"_addOnBlurAction","param1":"listener the function to be called"},"_onBlur":{"description":"Run OnBlur Actions","method":"_onBlur"},"_addOnFocusAction":{"description":"Add a function to be called when the window in which the model runs regains focus","method":"_addOnFocusAction","param1":"listener the function to be called"},"_onFocus":{"description":"Run OnFocus Actions","method":"_onFocus"},"_setInnerHTML":{"description":"Run OnFocus Actions","method":"_setInnerHTML"}},"actions":{}}}
