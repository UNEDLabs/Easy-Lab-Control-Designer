package org.colos.ejs.osejs;

import java.io.*;
import java.util.*;

import org.colos.ejs.osejs.utils.FileUtils;
import org.opensourcephysics.tools.minijar.PathAndFile;

/**
 * Meta data saved for a simulation generated by EJS
 */
public class Metadata {
  static public final String EXTENSION = ".metadata";

  // Added by the author
  private String title="", author="", keywords="", level="", language="", abstractInfo="";
  private Set<String> auxiliaryFiles = new TreeSet<String>(); // The set of auxiliary files required by the simulation
  private Set<String> packageList = new TreeSet<String>(); // The set of extra (non-class) files in non-standard JAR files (i.e. those in model element jars) that must be packed with the simulation

  // Added by the compilation process
  private String classname=""; // The class name of the generated simulation such as my_dir.my_subdir.My_Simulation
  private String execpath=""; // The execution classpath used to run the simulation
  private Set<String> jarFiles = new TreeSet<String>(); // The set of JAR files required by the simulation
  private Set<String> resourcePatterns = new TreeSet<String>(); // The set of additional resources to add when packaging.
                                                        // For example, CamImage adds  "com/charliemouse/++.gif"
  private Set<String> filesCreated = new TreeSet<String>(); // Files created in the output directory
  private String preferredWidth="300", preferredHeight="300";
  private String mainFrame="";
  private boolean colaborativeEnabled=false;
  private String mManifestUserLines = "";
  
  // getter methods
  public String getTitle() { return title; }
  public String getAbstract() { return abstractInfo; }
  public Set<String> getAuxiliaryFiles() { return auxiliaryFiles; }
  public Set<String> getPackageList() { return packageList; }
  public String getClassname() { return classname;}
  public String getExecpath() { return execpath;}
  public Set<String> getJarFiles() { return jarFiles; }
  public Set<String> getResourcePatterns() { return resourcePatterns; }
  public Set<String> getFilesCreated() { return filesCreated; }
  public String getPreferredWidth() { return this.preferredWidth;}
  public String getPreferredHeight() { return this.preferredHeight;}
  public String getMainFrame() { return this.mainFrame; }
  public boolean isCollaborative() { return this.colaborativeEnabled; }
  public String getManifestUserLines() { return mManifestUserLines; }
 

  /**
   * Private constructor
   */
  private Metadata() {}

  /**
   * Public constructor
   * @param _panelInfo
   * @param _classname
   * @param _execpath
   * @param _jarList
   * @param _resourcesString
   * @param _packageListStr
   * @param _dim
   */
  public Metadata (String _panelInfo, String _classname, String _execpath, Collection<PathAndFile> _jarList, 
      String _resourcesString, String _packageListStr, java.awt.Dimension _dim, 
      String _mainFrame, boolean _collaborative, String _userLines) {
    title        = OsejsCommon.getPiece(_panelInfo,"<Title><![CDATA[",   "]]></Title>",  false);
    author       = OsejsCommon.getPiece(_panelInfo,"<Author><![CDATA[",  "]]></Author>",  false);
    keywords     = OsejsCommon.getPiece(_panelInfo,"<Keywords><![CDATA[","]]></Keywords>",false);
    level        = OsejsCommon.getPiece(_panelInfo,"<Level><![CDATA[",   "]]></Level>",   false);
    language     = OsejsCommon.getPiece(_panelInfo,"<Language><![CDATA[","]]></Language>",false);
    abstractInfo = OsejsCommon.getPiece(_panelInfo,"<Abstract><![CDATA[","]]></Abstract>",false);
    if (_mainFrame.startsWith("\"")) _mainFrame = _mainFrame.substring(1);
    if (_mainFrame.endsWith("\"")) _mainFrame = _mainFrame.substring(0,_mainFrame.length()-1);
    this.mainFrame = _mainFrame;
    this.colaborativeEnabled = _collaborative;
    mManifestUserLines = _userLines;
    // Auxiliary files, both detected and user-added
    String detectedFiles = OsejsCommon.getPiece(_panelInfo,"<DetectedFiles><![CDATA[","]]></DetectedFiles>",false);
    StringTokenizer tkn = new StringTokenizer (detectedFiles,";");
    while (tkn.hasMoreTokens()) auxiliaryFiles.add(tkn.nextToken());
//    while (tkn.hasMoreTokens()) addToSet(auxiliaryFiles,tkn.nextToken(),_sourceDir, _xmlDir);
    String auxFiles = OsejsCommon.getPiece(_panelInfo,"<AuxiliaryFiles><![CDATA[","]]></AuxiliaryFiles>",false);
    tkn = new StringTokenizer (auxFiles,";");
    while (tkn.hasMoreTokens()) auxiliaryFiles.add(tkn.nextToken());
//    while (tkn.hasMoreTokens()) addToSet(auxiliaryFiles,tkn.nextToken(),_sourceDir, _xmlDir);
    StringTokenizer tknList = new StringTokenizer (_packageListStr,";");
    while (tknList.hasMoreTokens()) packageList.add(tknList.nextToken());
    
    classname = _classname;
    execpath = _execpath;
    if (_dim==null) {
      preferredWidth = "0";
      preferredHeight = "0";
    }
    else {
      preferredWidth = Integer.toString(_dim.width);
      preferredHeight = Integer.toString(_dim.height);
    }
    for (PathAndFile paf : _jarList) jarFiles.add(paf.getPath());
    // Resource patterns
    tkn = new StringTokenizer (_resourcesString,";");
    while (tkn.hasMoreTokens()) resourcePatterns.add(tkn.nextToken());

  }
  
//  /**
//   * Adds a filename to the list if it is a file, or all its subfiles if it is a directory
//   * @param _set
//   * @param _filename
//   * @param _sourceDir the EJS source directory (for non-relative filenames)
//   * @param _xmlDir the XML file (for relative filenames)
//   */
//  private static void addToSet(Set<String> _set, String _filename, File _sourceDir, File _xmlDir) {
//    boolean isRelative = _filename.startsWith("./");
//    File file;
//    if (isRelative) file = new File (_xmlDir,_filename.substring(2));
//    else file = new File (_sourceDir,_filename);
//    if (file.isDirectory()) { // don't add it, but add all the files under it
//      for (File subfile : JarTool.getContents(file)) {
//        if (isRelative) _set.add(FileUtils.getRelativePath(subfile, _xmlDir, true));
//        else _set.add(FileUtils.getRelativePath(subfile, _sourceDir, false));
//      }
//    }
//    else _set.add(_filename);
//  }
  
  private static String extractInfo (String source, String keyword) {
    String info = OsejsCommon.getPiece(source,"<"+keyword+"><![CDATA[","]]></"+keyword+">",false);
    return info==null ? "" : info;
  }

  /**
   * Reads the meta data information
   * @param _metadataFile The file to read
   * @param _relativePath The path to add to relative auxiliary files (such as ./MyImage.gif). Null if not needed 
   * @return
   */
  static public String getClassname (File _metadataFile) {
    if (!_metadataFile.exists()) {
      System.out.println ("Not existing metadata file: "+FileUtils.getPath(_metadataFile));
      return null;
    }
    String metadataString = FileUtils.readTextFile(_metadataFile,null);
    return extractInfo (metadataString, "Classname");
  }

  /**
   * Reads the meta data information
   * @param _metadataFile The file to read
   * @param _relativePath The path to add to relative auxiliary files (such as ./MyImage.gif). Null if not needed 
   * @return
   */
  static public Metadata readFile (File _metadataFile, String _relativePath) {
    if (!_metadataFile.exists()) {
      System.out.println ("Not existing metadata file: "+FileUtils.getPath(_metadataFile));
      return null;
    }
    Metadata metadata = new Metadata();
    String metadataString = FileUtils.readTextFile(_metadataFile,null);

    metadata.title        = extractInfo (metadataString, "Title");
    metadata.author       = extractInfo (metadataString, "Author");
    metadata.keywords     = extractInfo (metadataString, "Keywords");
    metadata.level        = extractInfo (metadataString, "Level");
    metadata.language     = extractInfo (metadataString, "Language");
    metadata.abstractInfo = extractInfo (metadataString, "Abstract");
    metadata.classname    = extractInfo (metadataString, "Classname");
    metadata.execpath    = extractInfo (metadataString,  "Execpath");
    metadata.preferredWidth  = extractInfo (metadataString,  "AppletWidth");
    metadata.preferredHeight = extractInfo (metadataString,  "AppletHeight");
    metadata.mainFrame       = extractInfo (metadataString,  "MainFrame");
    metadata.mManifestUserLines  = extractInfo (metadataString,  "ManifestUserLines");
    metadata.colaborativeEnabled = (extractInfo (metadataString,  "Collaborative")).contains("true");

    StringTokenizer tkn = new StringTokenizer (metadataString,"\n");
    while (tkn.hasMoreTokens()) {
      String token = tkn.nextToken();
      String info = OsejsCommon.getPiece(token,"<AuxiliaryFile><![CDATA[","]]></AuxiliaryFile>",false);
      if (info!=null) {
        if (_relativePath!=null && info.startsWith("./")) metadata.auxiliaryFiles.add(_relativePath+info.substring(2)); // relatively to the XML file location
        else metadata.auxiliaryFiles.add(info); // the path is complete
        continue;
      }

      info = OsejsCommon.getPiece(token,"<JarFile><![CDATA[","]]></JarFile>",false);
      if (info!=null) { metadata.jarFiles.add(info); continue; }
      
      info = OsejsCommon.getPiece(token,"<ResourcePattern><![CDATA[","]]></ResourcePattern>",false);
      if (info!=null) { metadata.resourcePatterns.add(info); continue; }
      
      info = OsejsCommon.getPiece(token,"<FileCreated><![CDATA[","]]></FileCreated>",false);
      if (info!=null) { metadata.filesCreated.add(info); continue; }

      info = OsejsCommon.getPiece(token,"<PackageListFile><![CDATA[","]]></PackageListFile>",false);
      if (info!=null) { metadata.packageList.add(info); continue; }
    
    }
    return metadata;
  }

  public File addFileCreated (File _file, String _parentDirPath) {
    filesCreated.add(FileUtils.getRelativePath(_file, _parentDirPath, false));
    return _file;
  }
  
  /**
   * Saves the meta data information
   */
  public File saveToFile (File _metadataFile) throws IOException {
    StringBuffer buffer = new StringBuffer();
    buffer.append("<Title><![CDATA["+title+"]]></Title>\n");
    buffer.append("<Author><![CDATA["+author+"]]></Author>\n");
    buffer.append("<Keywords><![CDATA["+keywords+"]]></Keywords>\n");
    buffer.append("<Level><![CDATA["+level+"]]></Level>\n");
    buffer.append("<Language><![CDATA["+language+"]]></Language>\n");
    buffer.append("<Abstract><![CDATA["+abstractInfo+"]]></Abstract>\n");
    for (String path : auxiliaryFiles) buffer.append("<AuxiliaryFile><![CDATA["+path+"]]></AuxiliaryFile>\n");
    for (String path : packageList) buffer.append("<PackageListFile><![CDATA["+path+"]]></PackageListFile>\n");
    buffer.append("<Classname><![CDATA["+classname+"]]></Classname>\n");
    buffer.append("<Execpath><![CDATA["+execpath+"]]></Execpath>\n");
    buffer.append("<AppletWidth><![CDATA["+preferredWidth+"]]></AppletWidth>\n");
    buffer.append("<AppletHeight><![CDATA["+preferredHeight+"]]></AppletHeight>\n");
    buffer.append("<MainFrame><![CDATA["+mainFrame+"]]></MainFrame>\n");
    buffer.append("<Collaborative><![CDATA["+colaborativeEnabled+"]]></Collaborative>\n");
    buffer.append("<ManifestUserLines><![CDATA["+this.mManifestUserLines+"]]></ManifestUserLines>\n");
    
    for (String path : jarFiles) buffer.append("<JarFile><![CDATA["+path+"]]></JarFile>\n");
    for (String pattern : resourcePatterns) buffer.append("<ResourcePattern><![CDATA["+pattern+"]]></ResourcePattern>\n");
    for (String filename : filesCreated) buffer.append("<FileCreated><![CDATA["+filename+"]]></FileCreated>\n");
    return FileUtils.saveToFile(_metadataFile, null, buffer.toString());
  }

  /**
   * Fills the Launcher node for a simulation
   * @param _node
   */
  public void fillLaunchNode (org.opensourcephysics.tools.LaunchNode _node) {
    _node.setTooltip(title);
    _node.setAuthor(author);
    _node.setKeyword(keywords);
    _node.setCourseLevel(level);
    _node.setLanguages(language);
    _node.setComment(abstractInfo);
    _node.setPreferredAppletWidth(preferredWidth);
    _node.setPreferredAppletHeight(preferredHeight);
  }


}
